// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum GameStatus {
  upcoming
  ongoing
  completed
}

enum ResultType {
  open
  close
  final
}

enum BetType {
  open
  close
  final
}

enum BetStatus {
  pending
  won
  lost
}

model Role {
  roleId         Int       @id @default(autoincrement())
  name           String    @db.VarChar(100)
  permissionJSON String?
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdBy      User?     @relation("RoleCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy      User?     @relation("RoleUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy      User?     @relation("RoleDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?

  User User[]
}

model User {
  userId            Int       @id @default(autoincrement())
  role              Role      @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  roleId            Int
  mobile            String    @db.VarChar(100)
  fullName          String?
  dob               String?
  referralCode      String?
  referredByCode    String?
  isNotificationsOn Boolean   @default(true)
  selectedTheme     String    @default("dark")
  password          String?
  status            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdBy         User?     @relation("UserCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy         User?     @relation("UserUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy         User?     @relation("UserDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?

  verifications   Verification[]
  loginHistories  LoginHistory[]
  wallets         Wallet[]
  userBets        UserBet[]
  userBankDetails UserBankDetail[]
  pppWallets      PPPWallet[]
  pppSessions                PPPSession[]
  pppUserBets                PPPUserBet[]
  pppGameResults              PPPGameResult[]

  // Inverse relations
  usersCreatedBy               User[]                @relation("UserCreatedBy")
  usersUpdatedBy               User[]                @relation("UserUpdatedBy")
  usersDeletedBy               User[]                @relation("UserDeletedBy")
  rolesCreatedBy               Role[]                @relation("RoleCreatedBy")
  rolesUpdatedBy               Role[]                @relation("RoleUpdatedBy")
  rolesDeletedBy               Role[]                @relation("RoleDeletedBy")
  verificationCreatedBy        Verification[]        @relation("VerificationCreatedBy")
  verificationUpdatedBy        Verification[]        @relation("VerificationUpdatedBy")
  verificationDeletedBy        Verification[]        @relation("VerificationDeletedBy")
  loginHistoryCreatedBy        LoginHistory[]        @relation("LoginHistoryCreatedBy")
  loginHistoryUpdatedBy        LoginHistory[]        @relation("LoginHistoryUpdatedBy")
  loginHistoryDeletedBy        LoginHistory[]        @relation("LoginHistoryDeletedBy")
  appSettingCreatedBy          AppSetting[]          @relation("AppSettingCreatedBy")
  appSettingUpdatedBy          AppSetting[]          @relation("AppSettingUpdatedBy")
  appSettingDeletedBy          AppSetting[]          @relation("AppSettingDeletedBy")
  notificationServiceCreatedBy NotificationService[] @relation("NotificationServiceCreatedBy")
  notificationServiceUpdatedBy NotificationService[] @relation("NotificationServiceUpdatedBy")
  notificationServiceDeletedBy NotificationService[] @relation("NotificationServiceDeletedBy")
  walletCreatedBy              Wallet[]              @relation("WalletCreatedBy")
  walletUpdatedBy              Wallet[]              @relation("WalletUpdatedBy")
  walletDeletedBy              Wallet[]              @relation("WalletDeletedBy")
  UserBankDetailCreatedBy      UserBankDetail[]      @relation("UserBankDetailCreatedBy")
  UserBankDetailUpdatedBy      UserBankDetail[]      @relation("UserBankDetailUpdatedBy")
  UserBankDetailDeletedBy      UserBankDetail[]      @relation("UserBankDetailDeletedBy")
  gameCreatedBy                Game[]                @relation("GameCreatedBy")
  gameUpdatedBy                Game[]                @relation("GameUpdatedBy")
  gameDeletedBy                Game[]                @relation("GameDeletedBy")
  gameResultCreatedBy          GameResult[]          @relation("GameResultCreatedBy")
  gameResultUpdatedBy          GameResult[]          @relation("GameResultUpdatedBy")
  gameResultDeletedBy          GameResult[]          @relation("GameResultDeletedBy")
  userBetCreatedBy             UserBet[]             @relation("UserBetCreatedBy")
  userBetUpdatedBy             UserBet[]             @relation("UserBetUpdatedBy")
  userBetDeletedBy             UserBet[]             @relation("UserBetDeletedBy")
  pppImageCreatedBy              PPPImage[]             @relation("ImageCreatedBy") 
  pppImageUpdatedBy              PPPImage[]             @relation("ImageUpdatedBy") 
  pppImageDeletedBy              PPPImage[]             @relation("ImageDeletedBy") 
  pppSessionCreatedBy         PPPSession[]                       @relation("PPPSessionCreatedBy")                                  
  pppSessionUpdatedBy         PPPSession[]                       @relation("PPPSessionUpdatedBy") 
  pppSessionDeletedBy         PPPSession[]                       @relation("PPPSessionDeletedBy") 
  pppUserBetCreatedBy         PPPUserBet[]                       @relation("PPPUserBetCreatedBy") 
  pppUserBetUpdatedBy         PPPUserBet[]                       @relation("PPPUserBetUpdatedBy") 
  pppUserBetDeletedBy         PPPUserBet[]                       @relation("PPPUserBetDeletedBy") 
  pppGameResultCreatedBy         PPPGameResult[]                       @relation("PPPGameResultCreatedBy") 
  pppGameResultUpdatedBy         PPPGameResult[]                       @relation("PPPGameResultUpdatedBy") 
  pppGameResultDeletedBy         PPPGameResult[]                       @relation("PPPGameResultDeletedBy") 
  pppWalletCreatedBy          PPPWallet[]                        @relation("PPPWalletCreatedBy") 
  pppWalletUpdatedBy          PPPWallet[]                        @relation("PPPWalletUpdatedBy") 
  pppWalletDeletedBy          PPPWallet[]                        @relation("PPPWalletDeletedBy") 
}

model Verification {
  verificationId   Int       @id @default(autoincrement())
  userId           Int
  user             User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  verificationType String
  hash             String?
  status           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  createdBy        User?     @relation("VerificationCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy        User?     @relation("VerificationUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy        User?     @relation("VerificationDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model LoginHistory {
  loginHistoryId Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  deviceType     String    @db.VarChar(50)
  deviceId       String?
  jwtToken       String
  fcmToken       String?
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdBy      User?     @relation("LoginHistoryCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy      User?     @relation("LoginHistoryUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy      User?     @relation("LoginHistoryDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model AppSetting {
  appSettingId       Int       @id @default(autoincrement())
  isAppShutdown      Boolean   @default(false)
  appShutDownMessage String    @default("This app is currently unavailable")
  status             Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdBy          User?     @relation("AppSettingCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy          User?     @relation("AppSettingUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy          User?     @relation("AppSettingDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model NotificationService {
  notificationServiceId Int       @id @default(autoincrement())
  service               String
  serviceType           String
  host                  String?
  port                  String?
  encryption            String?
  configuration         Json
  status                Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  deletedAt             DateTime?
  createdBy             User?     @relation("NotificationServiceCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy             User?     @relation("NotificationServiceUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy             User?     @relation("NotificationServiceDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  @@unique([service, serviceType])
}

model UserBankDetail {
  userBankDetailId  Int       @id @default(autoincrement())
  userId            Int
  user              User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  accountType       String
  accountHolderName String
  accountNumber     String
  bankName          String?
  ifscCode          String?
  status            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdBy         User?     @relation("UserBankDetailCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy         User?     @relation("UserBankDetailUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy         User?     @relation("UserBankDetailDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model Game {
  gameId     Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  logo       String?   @default("https://lucky-adda.com/api/app-logo.png") @db.VarChar(255)
  city       String    @db.VarChar(100)
  startTime  String
  endTime    String
  resultTime String
  status     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?
  createdBy  User?     @relation("GameCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy  User?     @relation("GameUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy  User?     @relation("GameDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  gameResults GameResult[]
  userBets    UserBet[]
  wallets     Wallet[]
}

model GameResult {
  resultId     Int        @id @default(autoincrement())
  gameId       Int
  resultNumber String     @db.VarChar(10)
  resultType   ResultType
  resultTime   DateTime   @default(now())
  status       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  createdBy    User?      @relation("GameResultCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy    User?      @relation("GameResultUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy    User?      @relation("GameResultDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  wallets Wallet[]

  game Game @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
}

model UserBet {
  betId         Int       @id @default(autoincrement())
  userId        Int
  gameId        Int
  betNumber     String    @db.VarChar(10)
  betAmount     Decimal   @db.Decimal(10, 2)
  pairType      String?
  betType       BetType?
  betStatus     BetStatus @default(pending)
  winningAmount Decimal   @default(0.00) @db.Decimal(10, 2)
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdBy     User?     @relation("UserBetCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy     User?     @relation("UserBetUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy     User?     @relation("UserBetDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
}

model Wallet {
  pppWalletId          Int            @id @default(autoincrement())
  userId            Int
  user              User?          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  transactionType   String         @default("credit")
  amount            Decimal        @db.Decimal(10, 2)
  approvalStatus    ApprovalStatus @default(pending)
  remarks           String?
  approvalRemarks   String?
  referenceWalletId Int?
  wallet            Wallet?        @relation("SelfReference", fields: [referenceWalletId], references: [walletId], onDelete: Cascade)
  referenceWallets  Wallet[]       @relation("SelfReference")
  gameId            Int?
  game              Game?          @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
  userBetIds        String?
  resultId          Int?
  imageUrl          String?
  gameResult        GameResult?    @relation(fields: [resultId], references: [resultId], onDelete: Cascade)
  isConverted       Boolean        @default(false)
  isBonus           Boolean        @default(false)
  status            Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdBy         User?          @relation("WalletCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy         User?          @relation("WalletUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy         User?          @relation("WalletDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model PPPImage {
  imageId        Int       @id @default(autoincrement())
  imageUrl       String    @db.VarChar(100)
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdBy      User?     @relation("ImageCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy      User?     @relation("ImageUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy      User?     @relation("ImageDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?

  pppUserBets PPPUserBet[]
  pppGameResults PPPGameResult[] 
}

model PPPSession {
  sessionId      Int       @id @default(autoincrement())
  startTime      String    @db.VarChar(100)
  endTime        String    @db.VarChar(100)
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdBy      User?     @relation("PPPSessionCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy      User?     @relation("PPPSessionUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy      User?     @relation("PPPSessionDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?

  pppUserBets PPPUserBet[]
  pppWallets PPPWallet[]
}

model PPPUserBet {
  userBetId       Int       @id @default(autoincrement())
  userId          Int
  sessionId       Int
  imageId         Int    
  betAmount       String    @db.VarChar(100)
  winningAmount   String    @db.VarChar(100)
  status          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  createdBy       User?     @relation("PPPUserBetCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy       User?     @relation("PPPUserBetUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy       User?     @relation("PPPUserBetDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?

  user              User?          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  pppSession        PPPSession?    @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  pppImage          PPPImage?      @relation(fields: [imageId], references: [imageId], onDelete: Cascade)

  pppGameResults PPPGameResult[]
}

model PPPGameResult {
  resultId     Int        @id @default(autoincrement())
  sessionId    Int
  imageId      Int?       // Add the imageId field
  winningAmount   String    @db.VarChar(100)
  status       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  createdBy    User?      @relation("PPPGameResultCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy    User?      @relation("PPPGameResultUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy    User?      @relation("PPPGameResultDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  pppWallets   PPPWallet[]

  pppImage     PPPImage?  @relation(fields: [imageId], references: [imageId], onDelete: SetNull) // Add relation to PPPImage
}

model PPPWallet {
  pppWalletId       Int            @id @default(autoincrement())
  userId            Int
  user              User?          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  transactionType   String         @default("credit")
  amount            Decimal        @db.Decimal(10, 2)
  approvalStatus    ApprovalStatus @default(pending)
  remarks           String?
  approvalRemarks   String?        
  userBetIds        String?
  resultId          Int?
  sessionId         Int?
  pppGameResult     PPPSession? @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  imageUrl          String?
  pppGameResult     PPPGameResult? @relation(fields: [resultId], references: [resultId], onDelete: Cascade)
  isConverted       Boolean        @default(false)
  status            Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdBy         User?          @relation("PPPWalletCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy         User?          @relation("PPPWalletUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy         User?          @relation("PPPWalletDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

   referenceWalletId Int?
  pppWallets            PPPWallet?        @relation("SelfReference", fields: [pppReferenceWalletId], references: [pppWalletId], onDelete: Cascade)

  pppReferenceWallets  PPPWallet[]       @relation("SelfReference")
}